
# -*- mode: org; -*-

* =APERTIUM-KAZ=: A MORPHOLOGICAL TRANSDUCER AND DISAMBIGUATOR FOR KAZAKH

WARNING: this is an early draft.

What follows is the documentation for /apertium-kaz/ -- a morphological
transducer and disambiguator for Kazakh. First draft of this documentation was
written, or, rather, assembled from various writings on [[https://wiki.apertium.org][Apertium's wiki]] and
then extended with more details by [[http://ifs.name][ifs]] on September-October 2018 for members of
the `Deep Learning for Sequential Models in Natural Language Processing with
Applications to Kazakh' (/dlsmnlpak/) research group at Nazarbayev University
and elsewhere. That being said, I hope that it will be useful for anyone who
uses /apertium-kaz/ and maybe wants or needs to extend it with more stems or
other features. Most of the things said in this guide should be applicable to
Apertium's transducers for other Turkic languages as well.

---

/Apertium-kaz/ is a morphological transducer and disambiguator for Kazakh,
currently under development. It is intended to be compatible with transducers
for other Turkic languages so that they can be translated between. It's used in
the following translators:

- Kazakh and Tatar
- English and Kazakh
- Kyrgyz and Kazakh
- Kazakh and Karakalpak
- Khalkha and Kazakh
- Kazakh and Russian

** Installation

** Usage

---

#+BEGIN_COMMENT
One of the goals of the /dlsmnlpak/ research project is to extend
/apertium-kaz/ with more stems and probabilistic guessing/tagging
capabilities. The latter, by the nature of the problem, requires creating a
human-annotated corpus of Kazakh of some sort. This task itself did not make it
into the final contract with the ministry of education, but still is
assumed. This forces us even more to be as efficient as we can while creating
it (or assembling it from other sources such as [5] by converting/adjusting
them).
#+END_COMMENT

** Annotating texts using /apertium-kaz/ and extending it with more stems while doing so 

The general principle here is to annotate texts *not* from scratch, but by
taking the the output of /apertium-kaz/ as the basis. This is logical because
/apertium-kaz/ already has a relatively high coverage on a range of corpora
(90-95% at the time of this writing [7]). In general, in case of
morphologically rich languages like Kazakh, developing a morphological analyser
first and then using it for annotation seems to be a common approach.

In addition, it is expedient to distinguish two layers at which annotation can
be done. One layer of annotation is at the level which is visible to the end
user of /apertium-kaz/. This would be marking surface forms such as /балам/
with expected analysis tags =<n><px1sg><nom>=. Another layer is at the hidden,
implementation level. That would correspond to annotating /балам/ as /N1/ (and
lemmatising it as /бала/), and then using such data for predicting the lemma
and the category of new, yet-unknown-to-apertium-kaz words with the aim of
extending it (the point being that the number of internal categories is orders
of magnitude less than the number of combinations of tags).

With that in mind, the most efficient way of annotating, in our opinion, is the
following. It consists of at least two stages. The goal of the first one is to
get to the point where we have a 1 million-tokens-corpus on which
/apertium-kaz/ has full coverage[fn:1]. The goal of the second stage is to
select correct analyses in cases when there are several, so that fully
disambiguated corpus is left in the result. Here we present instructions for
the first stage.

1. Pass the text that you want to annotate through the /kaz-tagger/ mode and
   the /format.py/ script: =apertium-kaz$ cat <your_text> | apertium -d
   . kaz-tagger | python3 corpus/format.py > corpus/N.tsv=
2. Open and read the /N.tsv/ file from the beginning. It will be a six-column,
   tab-separated values file, an example of which you can find in Appendix I,
   with the following columns:
   - surface form :: the word/token as it appears in the text
   - lemma :: the dictionary form of the word. More on that below
   - tags :: tags which /apertium-kaz/ has returned for the surface form
   - category :: the so-called *continuation lexicon*, which the lemma must
                 belong to in /apertium-kaz.kaz.lexc/
   - lexical form :: this field will be left empty in most cases and can be
                     ignored. It is reserved for lemma+affixes, as they would
                     appear if phonological rules weren’t applied to them, and
                     is mostly interesting for develops of these rules
   - correct :: spelling (if the surface form in the text has been misspelled,
                here we give the correct spelling of it)
3. For each unrecognized surface form in the /N.tsv/ file (marked with a * in
   the second column)

[fn:1] By *coverage* we mean the share of words in a text for which
apertium-kaz returns at least one analysis.


Imagine the following scenario: a linguist is annotating a Kazakh text with
morphological information, taking the output of =kaz-morph= or =kaz-tagger= as a
starting point. Since the coverage of =apertium-kaz= at the time of this writing
(September 2018) is about 95%, #+BEGIN_COMMENT TODO measure this automatically
and put the result here #+END_COMMENT it is reasonable to assume that, in the
text that she is annotating, the linguist will encounter stems unrecognized by
the transducer.

Each stem in =apertium-kaz.kaz.lexc= -- the lexicon of the transducer -- can be
followed by one ore more affixes of Kazakh, and thus cover many wordforms. Thus
when annotating a text with morphological tags, it is wise to add missing stems
to the lexicon frequently, re-compile =apertium-kaz=

The most effective way of working is arguably the following way of working in
`layers':

- pass the text that you want to annotate through the =kaz-tagger= mode
- read the output from the beginning
- for each unrecognized wordform:
  - identify its stem, following the information on that below
  - try to analyse the stem: =echo "stem" | apertium -d . kaz-morph=
  - if success: add the unrec. wordform to the end of =apertium-kaz.kaz.lexc=
    this way: =wordform
  - else: add stem to =apertium-kaz.kaz.lexc= this way: =stem:stem LEXICON ; !
    "english gloss"=, where you choose lexicon following the guidelines below
  - recompile =apertium-kaz=
  - pass the rest of the text you're annotating through the =kaz-tagger= mode
  - make sure that the wordform is correctly analysed now
  - repeat for the above steps for the rest of the text
- once there are no unrecognized wordforms, start selecting the correct
  analysis, if there are multiple. That is, filling in the third column of the
  spreadsheet.
- if the input wordform is misspelled, do not correct it in place, but add the
  sixth column in that row, in which give the properly spelled form of the
  word. Why? Misspellings info is quite valuable info, which will alllow us to
  do automatic spelling correction and thus making =apertium-kaz= more robust.
- add the resulting file to =apertium-kaz/corpus=, commit and push

TODO Later there will be a program/Racket-based programming language ( which we
will call Apertium#), which, given some free-form text, does some of the above
and calculates probabilities automatically, under the hood,.

What does this output format give us?

- All information potentially useful for statistical training +
  meta-information (license, source, genre, year etc) in one place.
- Machine-readable.
- Spreadsheet friendly = easy & fast to edit.
- Close/equivalent to the format used in NoSketchEngine and other corpus
  processing tools, thus less overhead with converting etc.

- getting to 100% coverage;
One of the goals === Guidelines for adding stems ===

==== An overview of the process ====

If you see that a wordform is not supported by apertium-kaz and you want to add it, you have to figure out three things:

# what the stem of the word is (to be exact, what the left-hand side and the right-hand side of the the entry should be),
# whether or not that stem is already in apertium-kaz, and
# (if it isn't or it isn't analysed as something that you expect) which continuation lexicon (read: paradigm) you should assign the stem to.

Here is an example of a word already in the apertium-kaz.kaz.lexc file:

<pre>
кітап:кітап N1 ; ! "book"
</pre>

As in this example, in most cases, the left hand-side and the right-hand side of the entry are the same. The left-hand side is the underlying form, the right-hand is the surface form. Continuation lexicon in this example is N1. What comes after the exclamation mark '!' are comments. Glosses are a good thing to have, but technically they are only a comment, and thus optional.

Here is an example where the left and right hand sides are not the same:

<pre>
күн% тәртібі:күн% тәртіп N-COMPOUND-PX ; ! ""
</pre>

This has been implemented in that way so that forms like "күн тәртіптері" can also be analysed as forms of the word "күн тәртібі".

The example above also shows that spaces in a word have to be escaped with %. So is the hyphen sign:

<pre>
мән%-жай:мән%-жай N1 ; ! ""
</pre>

==== General ====

- Before adding a stem, be sure it does not already exist in lexc. A good way to do that is to look up stem(s) you want to add with <code>lt-proc kaz.automorf.bin</code>. In some cases, you'll see that the stem isn't analysed at all:

^foo/*foo$

In some cases, it will be analysed, but as something else than what you want to add it as:

^Жол/жол<adj>$ ^жөндеуші/жөнде<v><tv><gpr_pot>$^./.<sent>$
 
(assuming that you want to add "Жол жөндеуші as a company name, which it happens to be).

Another, probably more relevant example:

<pre>
apertium-kaz$ echo "қабылдау" | apertium -d . kaz-tagger 
^қабылдау/қабылда<v><tv><ger><nom>$^./.<sent>$
</pre>

(supposing that some other forms of the word, say with case affixes, like e.g. "қабылдауды" weren't analysed (see the next paragraph) and thus you looked up қабылдау in <code>kaz.autogen.bin</code>). Looking the *stem* up (note: not the surface form, the stem) with the <code>lt-proc kaz.autogen.bin</code> command before adding it to the lexc file gives you a chance to save some work and to avoid addiing the same thing twice.

In the third case, you will see that the stem is already there, is linked to the right lexicon, but some surface forms of the word are not analysed. This means that either there is a problem with the phonology part, or you've discovered some affix currently not supported by apertium-kaz. Both issues have to be documented/reported (the simplest way would be just to add an 'ISSUES' file to apertium-kaz and commit it).

- Provide a commit message saying what you did.  At a bare minimum, "adding more stems" is okay, but "a" or "ф" is not.  Try to be more informative though; e.g. "added stems from story, mostly NP-TOP and NP-ANT" or similar.
- Many stems exhibit a voicing alternation like п/б, к/г, қ/ғ.  This is processed automatically by twol, but these stems ''must'' be added with the ''voiceless'' consonant (п, к, қ), e.g <code>тақ:тақ V-TV ;</code>
** Stems from Russian that end with one of the voiced consonants (б, г), such as <code>геолог</code> should be entered as spelled, but should be put in the right category for foreign words (e.g., if a noun, then <code>N5</code>).
- Words that have an inserted ‹ы› or ‹і› in some forms should get <code>%{y%}</code> in that spot on the right side, e.g. <code>орын:ор%{y%}н N1 ;</code>.
** Words that are commonly written in both forms (e.g., орнында and орынында) need special treatment: add <code>! Dir/LR</code> after the form that should not be generated (i.e., the form that is the non-normative version), and add <code>! Err/Orth</code> after it too if it should be considered a spelling mistake.
- Any changes to continuation classes should be discussed on the apertium-turkic mailing list.

Most likely, a word not covered by apertium-kaz already will be an open class word. Below are some comments on the open-class word lexicons.

==== Verbs ====
- Categorise correctly according to IV or TV status:
** IV = intransitive verbs; TV = transitive verbs
** If the verb can take a direct object with -НЫ, then it's not IV; otherwise it is TV
** For phrasal verbs (e.g,. "қабыл ал", "пайда бол", "мойынға ал"), do not categorise it according to its elements; instead treat it as a single verb (TV, IV, TV).
- There should be no infinitival final -у or -ю.  It is best to take the part of the verb before -GAн or -DI in those forms.
** Infinitives ending in -ю should end in ‹й› instead, e.g ‹сүю› should be entered as <code>сүй</code>
** Some verbs have a "hidden" ‹ы› or ‹і› under the ‹у›, for example <code>ері</code>, <code>аршы</code>, <code>аңды</code>, etc.  These verb stems should be added ''with'' the ‹ы› or ‹і›.
** Of course, verbs with ‹у› in the stem should keep the ‹у›, like <code>жу</code>, <code>қу</code>, <code>жау</code>, etc.
- Do not add passive or cooperative forms of verb stems (e.g., ‹тартыл› is passive of ‹тарт›, and ‹тартыс› is cooperative) unless absolutely needed for translation.  In this case, put <code>! Use/MT ! Der/Pass</code> or <code>! Use/MT ! Der/Coop</code> after the entry, respectively.
- If you add a causative form of a verb (e.g., ‹отырғыз› is causative of ‹отыр›), put <code>! Der/Caus</code> after it.

==== Nouns ====
- Some nouns end in ‹ә›, and have interesting or inconsistent-looking phonology, like <code>күнә</code>, <code>кінә</code>.  These should be added with the right side missing its ‹ә› and in the class N1-Ә.  E.g., <code>күнә:күн N1-Ә ;</code>
- Nouns from Russian should be classified as <code>N5</code>
** ''especially'' if the last vowel is ‹и› or ‹у›
** ''especially'' if they end with a consonant that would normally be voiced before a vowel-initial suffix in Kazakh words (п, к)
- Nouns that are compounds ending in a possessive form (like ‹ауа райы›) should be categorised into the <code>N-COMPOUND-PX</code> category and entered without the possessive ending on the right side, e.g. <code>ауа% райы:ауа% рай N-COMPOUND-PX ; ! "weather,climate"</code>
- If you're adding a noun that can also be used as an adjective, think whether it's actually an adjective or actually a noun and add it to the right category.  You'll want to subcategorise it correctly so that e.g. if it's a noun it can also take the {{tag|attr}} tag.

==== Adjectives ====
- The basic categorisation of adjectives depends on whether it takes comparative morphology (-ЫрАҚ), can be substantivised (acts like a noun), and/or can be adverbialised (acts like an adverb).  Be sure to put the adjective in the right category according what those categories allow.

- If you're adding an adjective that can also be used as a noun, think whether it's actually an adjective or actually a noun and add it to the right category.  You'll want to subcategorise it correctly so that e.g. if it's an adjective it can also take the {{tag|subst}} tag.

==== Adverbs ====
- If you want to add an adverb, first think whether the word is really an adjective that can be used like an adverb.  If this is the case, then add it as an adjective in the appropriate adjective class that can take the {{tag|advl}} tag.  In the bidix, you'll want to translate the {{tag|adj}} and the {{tag|adj}}{{tag|advl}} forms differently.

=== Additional tags ===

In a .lexc file, after the '!' you will also see <code>Dir/LR</code>, <code>Dir/RL</code>, <code>Err/Orth</code> and <code>Use/MT</code> comments. The meaning of them is as follows:

'''<code>Dir/LR</code>''' means: analyse this surface form, but don't generate it. Here is a good example:

<pre>
сұхбат:сұқбат N1 ; ! "conversation/interview" Dir/LR
сұхбат:сұхбат N1 ; ! "conversation/interview"
</pre>

In other words, <code>Dir/LR</code> marks alternative spellings of a word. If the alternative spelling isn't just alternative, but actually erroneous (but occurs quite commonly so that you want to support it), it is marked with the '''<code>Err/Orth</code>''' tag:

<pre>
орын:ор%{y%}н N1 ; ! "place,seat"
орын:орын N1 ; ! "place,seat"  ! Dir/LR ! Err/Orth
</pre>

"Орыны" for example, is considered erroneous spelling of "орын<n><px3sp><nom>". Such markings will allow us to produce better spell checkers.

In the examples above, if you don't mark either of the stems with <code>Dir/LR</code>, then the Kazakh generator, (if we personify it a bit) given a string like "^сұхбат<n><nom>$ for input, won't know which surface form to choose and will output both, separated with a slash: сұхбат/сұқбат.

As the name suggests, '''<code>Dir/RL</code>''' has the meaning opposite to <code>Dir/LR</code>: 'generate this surface form, but do not analyse it'. You won't see it much in a lexc file and almost certainly won't need to mark a stem you add as Dir/RL. Here is an example though: 

<pre>
да:%~да CC ; ! "also" Dir/RL
</pre>

The conjunction ^да<cnj$ gets generated as "~да". This is necessary for a somewhat hacky way of handling the vowel harmony (read: making sure that the "да" gets rendered as "де" when the preceding word has front vowels) in cases where the standard way of handling the vowel harmony (read: [[twol]]) fails because the preceding word is unknown. 

'''Use/MT''' (at least, in its original usage) marks (compound) words which are needed for translation, but probably shouldn't be in a "vanilla" Kazakh transducer:

<pre>
қайда% болса% сонда:қайда% болса% сонда PRON-IND ; ! "anywhere" Use/MT
</pre>

It has been also used to mark words which the person who added them wasn't sure how to classify. Such words will be reviewed later.

=== Full inventory of lexicons the stems can be linked to ===

It is useful to distinguish two classes of lexicons:
# lexicons which are only used as continuations for the other lexicons, and
# lexicons which are continuations for stems.

Here is an attempt to document the lexicons of the second kind found in the <code>apertium-kaz.kaz.lexc</code> file (so that: 1. people can add stems to a lexc file without having to read the lexc file itself 2. we can re-evaluate our decisions):
 
Nouns:
** N1
** N-COMPOUND-PX
** N5
** N1-ABBR
** N-INFL-INKI

Proper nouns:
- NP-ANT-F: feminine anthroponyms
- NP-ANT-M: masculine anthroponyms
- NP-COG-OB: family names ending with -ов or -ев
- NP-COG-IN: family names ending with -ин
- NP-COG-M: family name not ending with -ов, -ев or -in; masculine. Example: Галицкий
- NP-COG-F: family name not ending with -ов, -ев or -in; feminine. Example: Толстая
- NP-COG-MF: family names not ending with -ов, -ев or -in which are both masculine and feminine: 
- NP-PAT-VICH: patronyms ending with -вич (and thus which can also take the -вна ending): <code>Васильевич:Василье NP-PAT-VICH ; ! ""</code>
** (could be derived from anthroponyms automatically?)
** NP-TOP: toponyms (in particular, river names should go here too)
** NP-TOP-ASSR: former and future soviet socialistic republic names ending with СР: <code>Қырғыз% КСР:Қырғыз% КСР%{э%}%{й%} NP-TOP-ASSR ;</code>
** NP-ORG: organization names
** NP-ORG-LAT: organization names written in Latin character. Example: Microsoft
** NP-AL: proper names not belonging to one of the above NP-* classes. Example: Восток

Verbs:
- V-TV
- V-IV
- Vinfl-AUX

Adjectives:

- A1: adjectives which can be adverbialised and have a comparative form. Example: жақсы.
** Test 1: can the word in question modify verb? "Жақсы оқиды" OK? A: yes.
** Test 2: has a comparative form? "Жақсырақ" OK? A: yes
** ==> жақсы A1

- A2: adjectives which cannot be adverbialized, but which do have the comparative form. Example: <code>лайық:лайық A2 ; ! ""</code>

- A3: adjectives which can neither be adverbialized nor have comparative form

- A4: initially: adjectives like социал or (tat.) ''биологик'' = (kaz.) ''биологиялық'' which the author of this classification of adjectives thought to never substantivize, but have seen them substativized since then and thus considers deprecated.

The whole purpose of introducing subclasses of adjectives was to avoid overgenerating forms which do not exist.

If you're unsure which adjective lexicon to select, pick A1.

- A6:

Adverbs:

- ADV
- ADV-ITG
- ADV-WITH-KI
- ADV-WITH-KI-I
- ADV-LANG

[[Category:Tools]]
[[Category:Kazakh]]

------------------------------------------------------------------------------------------------------------------------------------------

{{TOCD}}

==Verbal noun or noun==

==Nominal compounds==

When choosing between {{tag|attr}} and {{tag|nom}} in noun1-noun2 compounds, the choice basically depends on if noun2 is marked for possession. If it is marked for possession then you should chose {{tag|nom}}, if not, then choose {{tag|attr}}.

- {{tag|attr}}:
** '''көрші''' елдер
- {{tag|nom}}:
** '''əлем''' чемпионаты

However, there are cases when noun2 is marked for possession but noun1 is not its possessor, e.g. 
"жазба әдебиеті" in a phrase "қазақ жазба әдебиеті". 
<pre>
қазақ       жазба          әдебиеті
Kazakh.NOM  written.ATTR   literature.3SG
</pre>
If we blindly applied the above rule for "жазба әдебиеті", then we would tag "жазба" as {{tag|nom}}, but actually "әдебиеті" is possessed by "қазақ", not by "жазба". 
Moreover, it is possible to drop "i" in "жазба әдебиеті", thus "жазба" is {{tag|attr}}.



<!-- def. izafet: Иранның экономиясы-->

==Specific words==

==="-DA"===

The word "-DA" can be a conjunction or a postadverb:

- <code>cnjcoo</code> [joins two or more noun/verb phrases; it's conjoining two parallel things in the same phrase, as opposed to saying that it's adding one thing to something from before]
** Үстелде қалам '''да''', қарындаш '''та''', дәптер '''де''' жатыр.
** Абай әуелі ауылдағы Ғабитхан молдадан сауатын ашады '''да''', 10 жасқа толған соң 3 жыл Семейдегі Ахмет Риза медресесінде оқиды.
- <code>postadverb</code> [means 'also', 'even', or used for emphasis]
** Мен '''де''' барамын.
** Аузы қисық болса '''да''' байдын баласы сөйлесін.

==="бұл", "мынау", "осы", "мына", "анау", "ана", "сол"===

The word "бұл" (along with "мынау", "осы", "мына", "анау", "ана", "сол") can be either a determiner, modifying a noun phrase, or a pronoun, replacing a noun phrase.

 <code>det.dem</code>
** '''Мынау''' үй жаңа.
- <code>prn</code>
** '''Мынау''' — терезе емес.
[[Category:Kazakh]]

The way to tell is whether it's part of the following noun phrase (det dem) or separate from it (prn)

===Verbs in dictionary form===

A verb in a dictionary form (gerund) can sometimes be a noun.
- <code>ger</code>
** Кітап '''оқу''' адамдарды ақылдырақ етеді.
- <code>n</code>
** '''Оқу''' басталды.

With gerunds you often get embedded arguments, like "кітап" in the example above.

If there is an adjective or determiner preceding: noun.

Some cases are ambiguous: Балалардың '''оқу'''ы жақсы болды.  Here, it's unclear whether бала is the subject of a verbal noun or the possessor of a noun.  In cases like this, the context can sometimes provide some intuition; e.g., in "Балалардың '''оқу'''ы басталды.", оқу seems more like a noun and less like a gerund.  In such ambiguous cases, if you have an intuition, go with that.  If not, go with verbal noun (the reason being that we would need more things in our lexicon, and also that these "noun" are derived from verbs anyway).

===Perfect participle or Verbal adverb===

Perfect participle (<code>prc_perf</code>) if there is an auxiliary following, otherwise verbal adverb (<code>gna_perf</code>)
- <code>prc_perf</code>
** Ол кәзір '''ұйықтап''' жатыр.
- <code>gna_perf</code>
** Мектепті '''бітіріп''', университетке түстім.
** Орталық Азиядан арий тайпалары '''келіп''' қоныстанды.
There is also other evidence that ''келіп'' in the example above is a verbal adverb: In particular, you can put arguments/adjuncts of ''қоныстанды'' between ''келіп'' and ''қоныстанды'', like "Орталық Азиядан арий тайпалары келіп бұл аймақта қоныстанды." In this case the two verbs function
as separate predicates, which participle+auxiliary constructions don't do.

==Futher reading==

 http://web.stanford.edu/~lelia/krejci_glass.pdf
